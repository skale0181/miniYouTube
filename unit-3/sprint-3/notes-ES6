The two most used data structures in JavaScript are Object and Array.

Objects allow us to create a single entity that stores data items by key.
Arrays allow us to gather data items into an ordered list.
Although, when we pass those to a function, it may need not an object/array as a whole. It may need individual pieces.

Destructuring assignment is a special syntax that allows us to "unpack" arrays or objects into a bunch of variables, as sometimes that's more convenient.

#### Array destructuring

Here's an example of how an array is destructured into variables:


Example 1

// we have an array with the name and surname
let arr = ["John", "Smith"]

How you might have to do it?

var firstname=arr[0]
var lastname=arr[1]

//with destructuring

let [firstName, surname] = arr;

alert(firstName); // John
alert(surname);  // Smith


Example 2

Ignore elements using commas
Unwanted elements of the array can also be thrown away via an extra comma:

// second element is not needed
let [firstName, , title] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];

alert( title ); // Consul





#### Rest example


The rest '…'
Usually, if the array is longer than the list at the left, the "extra" items are omitted.

For example, here only two items are taken, and the rest is just ignored:

let [name1, name2] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];

alert(name1); // Julius
alert(name2); // Caesar
// Further items aren't assigned anywhere
If we'd like also to gather all that follows – we can add one more parameter that gets "the rest" using three dots "...":

let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];

// rest is array of items, starting from the 3rd one
alert(rest[0]); // Consul
alert(rest[1]); // of the Roman Republic
alert(rest.length); // 2


#### Object Destructuring

Example 1


let options = {
  title: "Menu",
  width: 100,
  height: 200
};

let {title, width, height} = options;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200
Properties options.title, options.width and options.height are assigned to the corresponding variables.

The order does not matter.


## Rest example Object

let options = {
  title: "Menu",
  height: 200,
  width: 100
};

// title = property named title
// rest = object with the rest of properties
let {title, ...rest} = options;

// now title="Menu", rest={height: 200, width: 100}
alert(rest.height);  // 200
alert(rest.width);   // 100



#### Nested Object Destructuring

Example 1

let options = {
  size: {
    width: 100,
    height: 200
  },
  items: ["Cake", "Donut"],
  extra: true
};

// destructuring assignment split in multiple lines for clarity
let {
  size: { // put size here
    width,
    height
  },
  items: [item1, item2], // assign items here
  title = "Menu" // not present in the object (default value is used)
} = options;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200
alert(item1);  // Cake
alert(item2);  // Donut



#### Nested Array Destructuring


We can also perform nested Array Destructuring to get elements from nested array at deeper levels:

const numbers = [1, 2, [9, 10, [11, 12]]];

const [one, two, [nine, ten, [eleven, twelve]]] = numbers

console.log(one)    //1
console.log(nine)   //9
console.log(eleven) //11
An alternate for nested Array Destructuring is to use ES9 Array.flat() method, which flatten the nested array into a normal one:

const numbers = [1, 2, [9, 10, [11, 12]]];

const flattenNumbers = numbers.flat().flat();

const [one, two, nine, ten, eleven, twelve] = flattenNumbers;

console.log(one)    //1
console.log(nine)   //9
console.log(eleven) //11
Note that Array.flat() method flatten the nested array at one level deep. That is why we have called this method two times numbers.flat().flat() to flatten at two levels deep.




#### function smart params

Example 1


function findTotal(...arr) {
  var total = 0;
  arr.forEach((el) => {
    total += el;
  });

  return total;
}

var result = findTotal(5, 5, 3, 2, 3, 4, 5, 6, 6, 7);

console.log(result);



Example 2



var sayHello = function({ name, surname }) {
  console.log(`Hello ${name} ${surname}! How are you?`);
};

sayHello({ name: 'John', surname: 'Smith' })
// -> Hello John Smith! How are you?




Example 3


Argument Handling
With plain destructuring assignment, if the the input parameter can't be matched with the function's specified object arguments, all the unmatched arguments are undefined, so you need to add code that handles this properly:

var sayHelloTimes = function({ name, surname }, times) {
  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);
}

sayHelloTimes({ name: "Pam" }, 5678)
// -> Hello Pam undefined! I've seen you 5678 times before.
sayHelloTimes(5678)
// -> Hello undefined undefined! I've seen you undefined times before.



Example 4



var sayHelloTimes2 = function({ name = "Anony", surname = "Moose" } = {}, times) {
  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);
};

sayHelloTimes2({ name: "Pam" }, 5678)
// -> Hello Pam Moose! I've seen you 5678 times before.
sayHelloTimes2(5678)
// -> Hello Anony Moose! I've seen you undefined times before.
sayHelloTimes2()
// -> Hello Anony Moose! I've seen you undefined times before.



Example 5 - API

  var data;
  async function getData() {
    var response = await fetch("https://restcountries.eu/rest/v2/all");

    var data = await response.json();

    return data;
  }

  data();
  getData();

  async function data() {
    data = await getData();
    data.forEach((element) => {
      // console.log("element:", element);
      var {
        name,
        capital,
        currencies,
        languages: [{ name: firstName }],
      } = element;
      console.log(
        "name, capital, currencies:",
        name,
        capital,
        currencies,
        firstName
      );
    });
  }




Example 5.1 - 

async function data() {
    data = await getData();
    data.forEach((element) => {
      // console.log("element:", element);

      showData(element);
    });
  }

  function showData({
    name,
    capital,
    currencies,
    languages: [{ name: firstName }],
  }) {
    console.log(
      "name, capital, currencies:",
      name,
      capital,
      currencies,
      firstName
    );
  }